2003-02-26  Jörgen Cederlöf  <jc@lysator.liu.se>

	Moved the `trusted' configuration value to the configuration file.
	* gpgpathconfig.py: New `trusted' configuration value
	* findpath.py: Removed hardcoded `trusted' value

	Use the names we have in the database.
	* pathdb.py (get_key): New function.
	* pathdb.py (get_name): New function.
	* pathdb.py: Print names with keys.
	* findpath.py: Print names with keys. Allow specifying name
	instead of key id in arguments.
	
2003-02-23  Per Cederqvist  <ceder@ceder.dyndns.org>

	Don't accept signatures made by key 0x00000000, as they break the
	algorithm.
	* hkp.py (key_info.add_sig): There is apparently a key signed by
	key 0x00000000.  I don't believe that's a real signature, so
	ignore it.

	Attempt to track down a bug where pathdb.key_to_fetch returns key
	id 0.
	* pathdb.py (need_key): Assertion added.
	(request_keys): Assertion added.

2002-10-20  David Kågedal  <david@kagedal.org>

	* gpg.py: Unicode fixes
	* pathui.py: Unicode fixes

2002-10-19  David Kågedal  <davidk@lysator.liu.se>

	* gpg.py: New file that provides an interface to running gpg to
	extract key descriptions.
	* pathui.py: New file that provides a simple GTK-based GUI
	frontend.

2002-10-14  Per Cederqvist  <ceder@ceder.dyndns.org>

	Added bug reporting and CVS access.
	* README: Renamed project to GPG-Pathfinder.  Added a plea for
	help.  Mention CVS access and Bugzilla.
	Mention http://www.lysator.liu.se/~ceder/backup.out.gz.
	GPL.

	Renamed project.
	* findpath.py: Use gpgpathconfig.
	* createdb.sql: Rename database to gpgpathfinder.
	* pathdb.py: Use gpgpathconfig.
	* keyfetcher.py: Use gpgpathconfig.
	* hkp.py: Use gpgpathconfig.
	* pgppathconfig.py: Renamed to gpgpathconfig.py.
	* gpgpathconfig.py: New name for former pgppathconfig.py.
	* configure.in: Renamed to gpg-pathfinder.
	* Makefile.am: Rename project to gpg-pathfinder.  Rename database
	to gpgpathfinder.

2002-10-13  Per Cederqvist  <ceder@ceder.dyndns.org>

	* README: More text added.

	Fixed a broken progress message.
	* pathdb.py (insert_sigs_of_key): Print the correct key when
	printing a scheduling message.

	Improve stability.
	* hkp.py (get_key): Retry a few times if we get an error from
	urlopen.  The net is flaky these days.

	Port to current version of MySQLdb.
	* pathdb.py (init): The current version of MySQLdb comes with a
	good default set of type conversion functions, so don't provide
	our own.

	Performance tweaks.
	* keyfetcher.py (toploop): Lower the initial timeout to 0.05.
	* findpath.py (find_path): Lower the limit to 7.

	Spelling error.
	* createdb.sql: Fixed a spelling error in a comment.

2001-01-27  Per Cederqvist  <ceder@moria>

	More speedup.
	* createdb.sql (keys_needed): Tweak the index.

2001-01-21  Per Cederqvist  <ceder@moria>

	More speedup.
	* pathdb.py (extend_target): Use "insert into ... select" to speed
	up things.
	(extend_trust): Likewise.
	(request_keys): Ask for keys in smaller chunks, to avoid database
	limits.
	(insert_sigs_of_key): Fixed a fence post error.
	* createdb.sql (task_trusted): Optimize indexes.
	(task_trusted_tmp): New table.
	(task_target): Optimize indexes.
	(task_target_tmp): New table.

	Create make target to run "optimize table", and to backup and
	restore all keys.
	* optimize.sql: New file.
	* Makefile.am (optimize_db): New target.
	(backup): New target.
	(restore): New target.

2001-01-18  Per Cederqvist  <ceder@moria>

	More speedup.
	* pathdb.py (extend_target): Use a single executemany when
	inserting new keys.
	(extend_trust): Optimize for speed by using left joins instead of
	several 'select count(*)', and using executemany instead of
	execute.

2001-01-17  Per Cederqvist  <ceder@moria>

	Increase speed by a factor of 2.
	* pathdb.py (extend_target): Optimize for speed by using left
	joins instead of several 'select count(*)'.

2001-01-14  Per Cederqvist  <ceder@moria>

	Handle returned keys.  This basically works, but is way to slow.
	* pathdb.py (insert_key_update_tasks): Don't swap task and
	schedule.
	(best_match_found): Use backtrack() to simplify code.
	(backtrack): New function, extracted from best_match_found.
	(insert_sigs_of_key): Implemented most of this function.  It
	doesn't extend the trusted domain, however.
	(unchecked_key): New function.
	* findpath.py (find_path): Fetch keys from task_unchecked.
	* createdb.sql (task_unchecked): New table.

2001-01-13  Per Cederqvist  <ceder@moria>

	Many bugs fixed.
	* pathdb.py (best_match_found): Several bugs fixed.
	(insert_sigs_of_key): New argument: limit.  This is still not
	implemented.
	* findpath.py (find_path): Really limit the search.

	The user can now exclude unwanted keys from the result.
	* pathdb.py (extend_target): Don't allow forbidden keys to be part
	of the solution.
	(extend_trust): Likewise.
	(task_forbidden_keys): New function.
	* findpath.py (find_path): New optional argument: forbidden_keys.
	* createdb.sql (task_forbidden): New table.

2001-01-11  Per Cederqvist  <ceder@moria>

	Fetch keys from a keyserver when a search forces us to do so.
	The returned keys are not correctly handled yet, but it should now
	be possible to repeat the search again and again, to search among
	more and more keys.
	* findpath.py (fetched_key): New function.
	(find_path): Use it.  Fetch needed keys from keyserver.
	* pathdb.py (extend_target): Closed a cursor leak.
	(extend_trust): Likewise.
	(request_keys): New function.
	(insert_sigs_of_key): New function, not yet implemented.

2001-01-10  Per Cederqvist  <ceder@moria>

	Prune the search tree by searching from both the front and back.
	* findpath.py (find_path): Extend both the trust and the target
	sets, in an attempt to prune the search tree.
	* pathdb.py (extend_trust): New function.

2001-01-09  Per Cederqvist  <ceder@moria>

	A first, crude version of the search algorithm, that only works on
	keys already present in the database.
	* sqltypes.sed: Define "keytype" as an alias for uint32.
	* pathdb.py (type_conv): New constant.  We need to convert LONG as
	long, not int, since we store the key id:s as unsigned values.
	(init): Pass a conv argument to connect.
	(_insert_key): Handle unsigned keys, and keys with no uids,
	properly.  This is needed to handle nonexisting keys.
	(initial_setup): New function.
	(best_match_found): New function.
	(extend_target): New function.
	* keyfetcher.py (toploop): Some debugging removed.  Report each
	key fetch, and failure to fetch a key.
	* findpath.py (find_path): This now basically works, but only if
	all keys are already present in the database.  Vast heuristical
	improvements on the algorithm are possible.
	(print_path): New function.
	* createdb.sql: Use "keytype" as the type for key ids.  They
	should be uint32, never uint64.  Use uint32 instead of uint64 for
	several fields.
	(task_trusted.distance): Added an index on this field.
	(task_target.distance): Added an index on this field.

2001-01-07  Per Cederqvist  <ceder@moria>

	Use the database to figure out what keys to fetch.
	* findpath.py: New file.  This file is far from ready, but can
	excercise keyfetcher.py.
	* keyfetcher.py: New file.  Fetch keys that the database indicates
	are wanted.
	* pgppathconfig.py: New file.
	* pathdb.py (_insert_key): New function.
	(insert_key): Use _insert_key to simplify code.
	(insert_key_update_tasks): New function.
	(activate_task): New function.
	(deactivate_task): New function.
	(deactivate_all_tasks): New function.
	(key_to_fetch): New function.
	(create_task): New function.
	(need_key): New function.
	* hkp.py (KEYSERVER): Moved to pgppathconfig.  All users updated.
	* createdb.sql (tasks.active, tasks.schedule): New columns.

	Fetch keys and store them into the database.
	* pathdb.py: New file.  Can enter keys into the database.
	* hkp.py: New file, that can fetch key info from a keyserver.
	* createdb.sql (key_info.key_type): Column removed.
	(tasks.finished, tasks.lastused, tasks.pathfound): New columns.
	(task_trusted, task_target, keys_needed): New tables.

2001-01-06  Per Cederqvist  <ceder@moria>

	Start the project.
	* AUTHORS: New file.
	* Makefile.am: New file.
	* NEWS: New file.
	* README: New file.
	* THANKS: New file.
	* TODO: New file.
	* bootstrap.sh: New file.
	* configure.in: New file.
	* createdb.sql: New file.
	* mkrel.sh: New file.
	* sqltypes.sed: New file.
